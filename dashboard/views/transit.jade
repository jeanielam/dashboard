extends layout
block content
  style.
    #title {
      color: #ffffff;
    }
    #minuteText{
      font-variant:small-caps;
    }

    #routeNickname {
      font-weight: bold;
      font-size:20px;
      color: black;
      line-height: 35px;
      margin-bottom: 10px;
      border-bottom: 1px solid #000000;

    }

    #circleSVG {
      margin-left:auto;
      margin-right:auto;
      display:block;
    }

    .thumbnail {
      width: 25%;
      height: 175%;
      min-width: 220px;
      max-width: 350px;
      padding: 10px;
      margin: 10px;
      display: inline-block;
      background: linear-gradient(rgba(220,220,220,0.8), rgba(255,255,255,1));

    }

    .resultBox {
      max-width:100%;
      max-height: 425px;
      min-height: 400px;      
      margin-left: 10px;
      margin-right:10px;
      overflow: hidden;
      overflow-x: scroll; 
      white-space: nowrap;
      position: absolute;
      top: 50%;
      transform: translate(0,-50%)
    }

    .thumbnail ul {
      height: 75px;
      list-style-type: none;
      padding: 0;
      margin: 0;
      overflow: hidden;
      overflow-y: auto;
      text-align: left;
    }


  head    
  body
    a.btn.btn-link.pull-right#refresh
      span.glyphicon.glyphicon-repeat
    h1#title
      | Displaying Next-Bus Times for:    
    div(class='resultBox')
      // create a seperate element for each stop requested
      each stop in stops        
        .thumbnail(id=stop, class='result')
          p#routeNickname
            | #{stop}
          svg#circleSVG(height='200', width='200', align='center')
            g
              circle#circle(cx='100', cy='100', r='93', stroke='black', stroke-width='10', fill='white', fill-opacity='0')
              text#minutesRemaining(x='50%', y='50%', text-anchor='middle', font-family='Arial', font-size='400%', font-weight='bold')
              text#minuteText(x='50%', y='75%', text-anchor='middle', font-family='Arial', font-size='100%') 
                | minutes
          .caption
            ul#nextBusScheduled

  script.
    $(document).ready(function($) {
      refreshData();
      // refresh bus data every minute
      setInterval(refreshData, 60000);
    });

    $( '#refresh' ).on('click', function(e) {
      refreshData();
    });

    function refreshData() {
      $( '.resultBox' ).find( '.thumbnail' ).each(function(e) {
        var stop = $(this).attr( 'id' );
        var translinkAPI = {APIURL};
      
        // set cache to false to get updated expected leave times
        $.ajax({
          type: "GET",
          url: translinkAPI,
          cache: false,
          success: function(data) {
            parseResults(data, stop);
          },
          error: function(status) {
            console.log('die');
            console.log(status);
          }
        });      
      });
    }

    function parseResults(data, stopNo) {
      var elementID = '#' + stopNo;
      var firstIteration = true;
      // null the results so we don't display previous results
      $( elementID ).find( "#nextBusScheduled" ).text('');
      $( elementID ).find( "#minutesRemaining" ).text('');

      var stop = $(data).find('NextBus');
      $(stop).each(function() {
        var routeNum = $(this).find( "RouteNo" ).text(),
              routeName = $(this).find( "RouteName" ).text();   

        var nextArrival = $(this).find( "Schedules" );
        $(nextArrival).each(function() {

          var schedule = $(this).find( "Schedule" );
          $(schedule).each(function() {
            var countdown = parseInt($(this).find( "ExpectedCountdown" ).text()),
            // remove date stamp from expected leave time
              arrivalTime = $(this).find( "ExpectedLeaveTime" ).text().split(' ')[0],
              destination = $(this).find( "Destination" ).text();
            arrivalTime = convertTo24Hr(arrivalTime);
            $( elementID ).find( "#nextBusScheduled" ).append('<li>' + arrivalTime + ' - ' + routeNum + ' ' + destination + '</li>');
            
            
            // only make the countdown border red if the next bus appearing at the stop is within 15mins
            if (firstIteration) {
              firstIteration = false;
              // display time remaining as 0 if bus is arriving after scheduled time
              countdown < 0 ? countdown = 0 : countdown
              $( elementID ).find( "#minutesRemaining" ).text(countdown);
              if (countdown <= 15) {
                $( elementID ).find( '#circle' ).attr('stroke', 'red');
                if (countdown <= 1) {
                  $( elementID ).find( '#minuteText' ).text('minute');
                }
              } else {
               $( elementID ).find( '#circle' ).attr('stroke', 'black');
              }
            }            
          });          
        });
      });

      sortBusSchedule(elementID);
      sortDivByCountdown(elementID);
    }

    // time passed is of form h:mm{am/pm} or hh:mm{am/pm}
    // returns the time in 24 hour clock format
    function convertTo24Hr(time) {
      // convert hour to integer to add 12 for pm values
      var hour = parseInt(time.split(':')[0]);
      var afternoon = time.substr(time.length - 2, time.length)

      if (afternoon =='pm' && hour != 12) {
        hour += 12;
        
      } else if (hour == 12 && afternoon == 'am') {
        hour = '00';
      } else if (afternoon == 'am') hour = '0' + hour;
      
      return hour + ':' + time.split(':')[1].split(afternoon)[0]
    }

    // sort list of returned next busses in chronological order
    function sortBusSchedule(elementID) {
      // for use in comparison date strings for ordering time
      var tempDate = '01/01/2000 ';
      var nextBusList = $( elementID ).find( '#nextBusScheduled' );
      var resultList = nextBusList.children('li').get();
      resultList.sort(function(a, b) {
        return Date.parse(tempDate + $(a).text().split(' ')[0]) > Date.parse(tempDate + $(b).text().split(' ')[0]);
      });
      $.each(resultList, function(idx, itm) { nextBusList.append(itm)});
    }

    // sort returned results by minutes remaining
    function sortDivByCountdown(elementID) {
      sorted = $( '.resultBox' ).find( '.result' ).sort(function(a,b) {
        return parseInt($(a).find( '#minutesRemaining' ).text()) > parseInt($(b).find( '#minutesRemaining' ).text());
      })
      $( '.resultBox' ).html(sorted);
    }
    